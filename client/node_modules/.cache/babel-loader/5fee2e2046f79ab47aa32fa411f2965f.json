{"ast":null,"code":"var _jsxFileName = \"/Users/Christina/Desktop/projects/book-search-engine/client/src/pages/SavedBooks.js\";\nimport React from \"react\";\nimport { Jumbotron, Container, CardColumns, Card, Button } from \"react-bootstrap\";\nimport Auth from \"../utils/auth\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\nimport { GET_ME } from \"../utils/queries\";\nimport { removeBookId } from \"../utils/localStorage\";\n\nconst SavedBooks = () => {\n  var _userData$savedBooks, _userData$savedBooks2;\n\n  const {\n    loading,\n    data\n  } = useQuery(GET_ME);\n  const [removeBook, {\n    error\n  }] = useMutation(REMOVE_BOOK);\n  const userData = (data === null || data === void 0 ? void 0 : data.me) || {}; // use this to determine if `useEffect()` hook needs to run again\n  // const userDataLength = Object.keys(userData).length;\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n\n  const handleDeleteBook = async bookId => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const {\n        data\n      } = await removeBook({\n        variables: {\n          bookId\n        }\n      });\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  }; // if data isn't here yet, say so\n\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 10\n      }\n    }, \"LOADING...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Jumbotron, {\n    fluid: true,\n    className: \"text-light bg-dark\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 6\n    }\n  }, \"Viewing saved books!\"))), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, ((_userData$savedBooks = userData.savedBooks) === null || _userData$savedBooks === void 0 ? void 0 : _userData$savedBooks.length) ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? \"book\" : \"books\"}:` : \"You have no saved books!\"), /*#__PURE__*/React.createElement(CardColumns, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, (_userData$savedBooks2 = userData.savedBooks) === null || _userData$savedBooks2 === void 0 ? void 0 : _userData$savedBooks2.map(book => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: book.bookId,\n      border: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 8\n      }\n    }, book.image ? /*#__PURE__*/React.createElement(Card.Img, {\n      src: book.image,\n      alt: `The cover for ${book.title}`,\n      variant: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 10\n      }\n    }) : null, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 10\n      }\n    }, book.title), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 10\n      }\n    }, \"Authors: \", book.authors), /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 10\n      }\n    }, book.description), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-block btn-danger\",\n      onClick: () => handleDeleteBook(book.bookId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 10\n      }\n    }, \"Delete this Book!\")));\n  }))));\n};\n\nexport default SavedBooks;","map":{"version":3,"sources":["/Users/Christina/Desktop/projects/book-search-engine/client/src/pages/SavedBooks.js"],"names":["React","Jumbotron","Container","CardColumns","Card","Button","Auth","useQuery","useMutation","REMOVE_BOOK","GET_ME","removeBookId","SavedBooks","loading","data","removeBook","error","userData","me","handleDeleteBook","bookId","token","loggedIn","getToken","variables","err","console","savedBooks","length","map","book","image","title","authors","description"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n\tJumbotron,\n\tContainer,\n\tCardColumns,\n\tCard,\n\tButton,\n} from \"react-bootstrap\";\nimport Auth from \"../utils/auth\";\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\nimport { GET_ME } from \"../utils/queries\";\n\nimport { removeBookId } from \"../utils/localStorage\";\n\nconst SavedBooks = () => {\n\tconst { loading, data } = useQuery(GET_ME);\n\tconst [removeBook, { error }] = useMutation(REMOVE_BOOK);\n\tconst userData = data?.me || {};\n\n\t// use this to determine if `useEffect()` hook needs to run again\n\t// const userDataLength = Object.keys(userData).length;\n\n\t// create function that accepts the book's mongo _id value as param and deletes the book from the database\n\tconst handleDeleteBook = async (bookId) => {\n\t\tconst token = Auth.loggedIn() ? Auth.getToken() : null;\n\n\t\tif (!token) {\n\t\t\treturn false;\n\t\t}\n\t\ttry {\n\t\t\tconst { data } = await removeBook({ variables: { bookId } });\n\n\t\t\tremoveBookId(bookId);\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t}\n\t};\n\n\t// if data isn't here yet, say so\n\tif (loading) {\n\t\treturn <h2>LOADING...</h2>;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Jumbotron fluid className=\"text-light bg-dark\">\n\t\t\t\t<Container>\n\t\t\t\t\t<h1>Viewing saved books!</h1>\n\t\t\t\t</Container>\n\t\t\t</Jumbotron>\n\t\t\t<Container>\n\t\t\t\t<h2>\n\t\t\t\t\t{userData.savedBooks?.length\n\t\t\t\t\t\t? `Viewing ${userData.savedBooks.length} saved ${\n\t\t\t\t\t\t\t\tuserData.savedBooks.length === 1 ? \"book\" : \"books\"\n\t\t\t\t\t\t  }:`\n\t\t\t\t\t\t: \"You have no saved books!\"}\n\t\t\t\t</h2>\n\t\t\t\t<CardColumns>\n\t\t\t\t\t{userData.savedBooks?.map((book) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Card key={book.bookId} border=\"dark\">\n\t\t\t\t\t\t\t\t{book.image ? (\n\t\t\t\t\t\t\t\t\t<Card.Img\n\t\t\t\t\t\t\t\t\t\tsrc={book.image}\n\t\t\t\t\t\t\t\t\t\talt={`The cover for ${book.title}`}\n\t\t\t\t\t\t\t\t\t\tvariant=\"top\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t\t<Card.Title>{book.title}</Card.Title>\n\t\t\t\t\t\t\t\t\t<p className=\"small\">Authors: {book.authors}</p>\n\t\t\t\t\t\t\t\t\t<Card.Text>{book.description}</Card.Text>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn-block btn-danger\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleDeleteBook(book.bookId)}>\n\t\t\t\t\t\t\t\t\t\tDelete this Book!\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</CardColumns>\n\t\t\t</Container>\n\t\t</>\n\t);\n};\n\nexport default SavedBooks;\n"]},"metadata":{},"sourceType":"module"}